{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth.service.ts","webpack:///./src/app/http-error-handler.service.ts","webpack:///./src/app/http-interceptors/auth-interceptor.ts","webpack:///./src/app/http-interceptors/ensure-https-interceptor.ts","webpack:///./src/app/http-interceptors/index.ts","webpack:///./src/app/http-interceptors/logging-interceptor.ts","webpack:///./src/app/http-interceptors/noop-interceptor.ts","webpack:///./src/app/http-interceptors/trim-name-interceptor.ts","webpack:///./src/app/message.service.ts","webpack:///./src/app/messages/messages.component.css","webpack:///./src/app/messages/messages.component.html","webpack:///./src/app/messages/messages.component.ts","webpack:///./src/app/posts.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<h1>HTTP Sample</h1>\\n<div>\\n  <input type=\\\"checkbox\\\" id=\\\"heroes\\\" [checked]=\\\"toggleHeroes\\\" (click)=\\\"toggleHeroes()\\\">\\n  <label for=\\\"heroes\\\">Heroes</label>\\n\\n  <input type=\\\"checkbox\\\" id=\\\"config\\\" [checked]=\\\"showConfig\\\" (click)=\\\"toggleConfig()\\\">\\n  <label for=\\\"config\\\">Config</label>\\n\\n  <input type=\\\"checkbox\\\" id=\\\"downloader\\\" [checked]=\\\"showDownloader\\\" (click)=\\\"toggleDownloader()\\\">\\n  <label for=\\\"downloader\\\">Downloader</label>\\n\\n  <input type=\\\"checkbox\\\" id=\\\"uploader\\\" [checked]=\\\"showUploader\\\" (click)=\\\"toggleUploader()\\\">\\n  <label for=\\\"uploader\\\">Uploader</label>\\n\\n  <input type=\\\"checkbox\\\" id=\\\"search\\\" [checked]=\\\"showSearch\\\" (click)=\\\"toggleSearch()\\\">\\n  <label for=\\\"search\\\">Search</label>\\n</div>\\n\\n<app-messages></app-messages>\\n\\n\\n<!-- \\nCopyright 2017-2018 Google Inc. All Rights Reserved.\\nUse of this source code is governed by an MIT-style license that\\ncan be found in the LICENSE file at http://angular.io/license\\n-->\"","import { Component } from '@angular/core';\nimport { PostsService } from './posts.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Angular6-Http-Interceptors';\n  heroes = [];\n\n  constructor(private heroesService: PostsService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n \n  getHeroes(): void {\n    this.heroesService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { httpInterceptorProviders } from './http-interceptors';\nimport { AuthService } from './auth.service';\nimport { HttpErrorHandler } from './http-error-handler.service';\nimport { MessageService } from './message.service';\nimport { MessagesComponent } from './messages/messages.component';\nimport { PostsService } from './posts.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MessagesComponent\n  ],\n  imports: [\n    BrowserModule,\n  ],\n  providers: [\n    AuthService,\n    HttpErrorHandler,\n    MessageService,\n    PostsService,\n    httpInterceptorProviders\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\r\n\r\n/** Mock client-side authentication/authorization service */\r\n@Injectable()\r\nexport class AuthService {\r\n  getAuthorizationToken() {\r\n    return 'some-auth-token';\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { MessageService } from './message.service';\r\n\r\n/** Type of the handleError function returned by HttpErrorHandler.createHandleError */\r\nexport type HandleError =\r\n  <T> (operation?: string, result?: T) => (error: HttpErrorResponse) => Observable<T>;\r\n\r\n/** Handles HttpClient errors */\r\n@Injectable()\r\nexport class HttpErrorHandler {\r\n  constructor(private messageService: MessageService) { }\r\n\r\n  /** Create curried handleError function that already knows the service name */\r\n  createHandleError = (serviceName = '') => <T>\r\n    (operation = 'operation', result = {} as T) => this.handleError(serviceName, operation, result);\r\n\r\n  /**\r\n   * Returns a function that handles Http operation failures.\r\n   * This error handler lets the app continue to run as if no error occurred.\r\n   * @param serviceName = name of the data service that attempted the operation\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  handleError<T> (serviceName = '', operation = 'operation', result = {} as T) {\r\n\r\n    return (error: HttpErrorResponse): Observable<T> => {\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      const message = (error.error instanceof ErrorEvent) ?\r\n        error.error.message :\r\n       `server returned code ${error.status} with body \"${error.error}\"`;\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.messageService.add(`${serviceName}: ${operation} failed: ${message}`);\r\n\r\n      // Let the app keep running by returning a safe result.\r\n      return of( result );\r\n    };\r\n\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private auth: AuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    // Get the auth token from the service.\r\n    const authToken = this.auth.getAuthorizationToken();\r\n\r\n    /*\r\n    * The verbose way:\r\n    // Clone the request and replace the original headers with\r\n    // cloned headers, updated with the authorization.\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('Authorization', authToken)\r\n    });\r\n    */\r\n    // Clone the request and set the new header in one step.\r\n    const authReq = req.clone({ setHeaders: { Authorization: authToken } });\r\n\r\n    // send cloned request with header to the next handler.\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class EnsureHttpsInterceptor implements HttpInterceptor {\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // clone request and replace 'http://' with 'https://' at the same time\r\n    const secureReq = req.clone({\r\n      url: req.url.replace('http://', 'https://')\r\n    });\r\n    // send the cloned, \"secure\" request to the next handler.\r\n    return next.handle(secureReq);\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","/* \"Barrel\" of Http Interceptors */\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { AuthInterceptor } from './auth-interceptor';\r\nimport { EnsureHttpsInterceptor } from './ensure-https-interceptor';\r\nimport { LoggingInterceptor } from './logging-interceptor';\r\nimport { NoopInterceptor } from './noop-interceptor';\r\nimport { TrimNameInterceptor } from './trim-name-interceptor';\r\n\r\n\r\n/** Http interceptor providers in outside-in order */\r\nexport const httpInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: NoopInterceptor, multi: true },\r\n\r\n  { provide: HTTP_INTERCEPTORS, useClass: EnsureHttpsInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: TrimNameInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\r\n  { provide: HTTP_INTERCEPTORS, useClass: LoggingInterceptor, multi: true },\r\n\r\n];\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent, HttpInterceptor, HttpHandler,\r\n  HttpRequest, HttpResponse\r\n} from '@angular/common/http';\r\n\r\nimport { finalize, tap } from 'rxjs/operators';\r\nimport { MessageService } from '../message.service';\r\n\r\n@Injectable()\r\nexport class LoggingInterceptor implements HttpInterceptor {\r\n  constructor(private messenger: MessageService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    const started = Date.now();\r\n    let ok: string;\r\n\r\n    // extend server response observable with logging\r\n    return next.handle(req)\r\n      .pipe(\r\n        tap(\r\n          // Succeeds when there is a response; ignore other events\r\n          event => ok = event instanceof HttpResponse ? 'succeeded' : '',\r\n          // Operation failed; error is an HttpErrorResponse\r\n          error => ok = 'failed'\r\n        ),\r\n        // Log when response observable either completes or errors\r\n        finalize(() => {\r\n          const elapsed = Date.now() - started;\r\n          const msg = `${req.method} \"${req.urlWithParams}\"\r\n             ${ok} in ${elapsed} ms.`;\r\n          this.messenger.add(msg);\r\n        })\r\n      );\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\n/** Pass untouched request through to the next request handler. */\r\n@Injectable()\r\nexport class NoopInterceptor implements HttpInterceptor {\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler):\r\n    Observable<HttpEvent<any>> {\r\n    return next.handle(req);\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class TrimNameInterceptor implements HttpInterceptor {\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const body = req.body;\r\n    if (!body || !body.name ) {\r\n      return next.handle(req);\r\n    }\r\n    // copy the body and trim whitespace from the name property\r\n    const newBody = { ...body, name: body.name.trim() };\r\n    // clone request and set its body\r\n    const newReq = req.clone({ body: newBody });\r\n    // send the cloned request to the next handler.\r\n    return next.handle(newReq);\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class MessageService {\r\n  messages: string[] = [];\r\n\r\n  add(message: string) {\r\n    this.messages.push(message);\r\n  }\r\n\r\n  clear() {\r\n    this.messages = [];\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright 2017-2018 Google Inc. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"messageService.messages.length\\\">\\n  <h3>Messages</h3>\\n  <button class=\\\"clear\\\" (click)=\\\"messageService.clear()\\\">clear</button>\\n  <br>\\n  <ol>\\n    <li *ngFor='let message of messageService.messages'> {{message}} </li>\\n  </ol>\\n</div>\\n\\n\\n<!-- \\nCopyright 2017-2018 Google Inc. All Rights Reserved.\\nUse of this source code is governed by an MIT-style license that\\ncan be found in the LICENSE file at http://angular.io/license\\n-->\"","import { Component, OnInit } from '@angular/core';\nimport { MessageService } from '../message.service';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements OnInit {\n\n  constructor(public messageService: MessageService) {}\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler, HandleError } from './http-error-handler.service';\n\n/** Mock client-side authentication/authorization service */\n@Injectable()\nexport class PostsService {\n\n    heroesUrl = 'https://jsonplaceholder.typicode.com/posts';  // URL to web api\n    private handleError: HandleError;\n\n    constructor(\n        private http: HttpClient,\n        httpErrorHandler: HttpErrorHandler) {\n        this.handleError = httpErrorHandler.createHandleError('HeroesService');\n    }\n\n    /** GET heroes from the server */\n    getHeroes(): Observable<any[]> {\n        return this.http.get<any[]>(this.heroesUrl)\n            .pipe(\n                catchError(this.handleError('Busca de Herois', []))\n            );\n    }\n}\n\n\n/*\nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n*/","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n"],"sourceRoot":""}